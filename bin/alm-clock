#! /bin/python
# License at the bottom

import sys
import time
import datetime
import math
import tkinter
from tkinter import Tk, Canvas


usage = '''
usage:  alclock [-t TIMEOUT] [-h HOUR] [-m MINUTE]
where the hour and minute are optional, for testing
'''


def parse_args():
    stay_alive_for = 0.8
    t = datetime.datetime.now()
    hour = t.hour
    minute = t.minute
    next_arg_type = ""

    for arg in sys.argv[1:]:

        if arg == "--help":
            print(usage)
            exit(0)

        if not next_arg_type:
            next_arg_type = arg
            continue

        if next_arg_type == '-t':
            stay_alive_for = float(arg)
        elif next_arg_type == '-h':
            hour = int(arg)
        elif next_arg_type == '-m':
            minute = int(arg)
        else:
            print(usage)
            break

        next_arg_type = ""
    return (stay_alive_for, hour, minute)


stay_alive_for, hour, minute = parse_args()
exact_hour = hour + minute/60

# the window
W = 800
H = 1000

# the clock
middle = H/2
rad = W * 0.4
line_w = 30
hour_ind_w = rad * 0.2

root = Tk(className="Clock widget")
canv = Canvas(root, bg="#15161E", width=W, height=H, highlightthickness=0)

grey_fill = "#606582"
bright_fill = "#c0caf5"
black_fill = "#0d0a10"
alarm_fill = "#ff5555" 
orange_fill = "#ff8888"
pale_fill = "#333a52"
line_fill = pale_fill
task_fill = orange_fill


# percent to coordinate, [0, 1] instead of radients
def perc_to_x(p, r): return W/2 + r * math.cos(-p * 2 * math.pi + math.pi / 2)
def perc_to_y(p, r): return H/2 - r * math.sin(-p * 2 * math.pi + math.pi / 2)


# background / fill
canv.create_oval(
        W/2 - rad, 
        H/2 - rad, 
        W/2 + rad, 
        H/2 + rad, fill=black_fill, width=0)

# outline
canv.create_oval(
        W/2 - rad, 
        H/2 - rad, 
        W/2 + rad, 
        H/2 + rad, outline=line_fill, width=line_w)

# spikes
for i in [5, 10, 20, 25, 35, 40, 50, 55]:
    canv.create_oval(
            perc_to_x(i/60, rad * 0.97) - line_w / 2, 
            perc_to_y(i/60, rad * 0.97) - line_w / 2,
            perc_to_x(i/60, rad * 0.97) + line_w / 2, 
            perc_to_y(i/60, rad * 0.97) + line_w / 2, fill=line_fill, width=0)

# big spikes
for i in [0, 15, 30, 45]:
    canv.create_line(
            perc_to_x(i/60, rad * 0.8), 
            perc_to_y(i/60, rad * 0.8),
            perc_to_x(i/60, rad), 
            perc_to_y(i/60, rad), fill=line_fill, width=line_w)


pointer_fill = orange_fill

# rounded corner of hour indicator
canv.create_oval(
        W/2 - line_w / 2,
        H/2 - line_w / 2,
        W/2 + line_w / 2,
        H/2 + line_w / 2, fill=pointer_fill, width=0)

hour_tip_x = perc_to_x(exact_hour/12, rad * 0.5)
hour_tip_y = perc_to_y(exact_hour/12, rad * 0.5)

# hour
canv.create_line(W/2, H/2,
        hour_tip_x, 
        hour_tip_y, fill=pointer_fill, width=line_w)

# minute
canv.create_line(W/2, H/2, 
        perc_to_x(minute/60, rad * 1.0 + line_w / 2), 
        perc_to_y(minute/60, rad * 1.0 + line_w / 2), fill=pointer_fill, width=line_w*0.8)


# hour label
f = math.floor(exact_hour)
c = math.ceil (exact_hour)
appr = c
if abs(exact_hour - f) < abs(exact_hour - c):
    appr = f

hour_ind_x = perc_to_x(appr / 12, rad * 0.7)
hour_ind_y = perc_to_y(appr / 12, rad * 0.7)

canv.create_text(
        hour_ind_x,
        hour_ind_y,
        text=str(appr), 
        font=("Fira Code", int(hour_ind_w), ""),
        fill=bright_fill)


canv.pack()

root.update()
time.sleep(stay_alive_for)


# Copyright (c) 2023 Dimakopoulos Theodoros
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
